rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024; // 5MB max
    }

    // Story images rules
    match /stories/{userId}/{fileName} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && isOwner(userId)
        && isValidImage();
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && isValidImage();
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 